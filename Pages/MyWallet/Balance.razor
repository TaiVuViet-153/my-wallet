@page "/wallet"

@inject HttpClient _http
@inject NavigationManager _nav
@using System.Net.Http.Json
@using System.Text.Json
@using System.Net.Http
@using System.Globalization

<PageTitle>My Wallet</PageTitle>

<div class="container-fluid bg-dark">
    <div class="balance d-flex flex-column justify-content-center align-items-center">
        <h1 class="text-uppercase text-danger fw-bold">My Wallet</h1>
        <h2 class="text-light">Account Name: <span class="text-uppercase fw-bold">@myWallet.AccountName</span></h2>
        <h2 class="text-light">Account Number: <span class="text-uppercase fw-bold">@myWallet.AccountNumber</span></h2>
        <h3 class="text-warning">@myWallet.Balance.ToString("C", CultureInfo.GetCultureInfo("en-US"))</h3>
        <p class="text-light">Total Balance</p>
        <div class="handle-account">
            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="() => handleTransactionType(true)">Deposit</button>
            <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="() => handleTransactionType(false)">Withdraw</button>
        </div>
    </div>
    
    <TransactionHistory lsTransaction=@transaction />
</div>

<TransactionHandler transactionType=@transactionType balance=@myWallet.Balance handleTransaction=@handleTransaction/>



@code {
    WalletVM myWallet = new WalletVM();

    List<TransactionVM> transaction = new List<TransactionVM>();

    bool transactionType;


    public async Task LoadData() {
        var data = await _http.GetFromJsonAsync<WalletVM>($"{_nav.BaseUri}/data/data-wallet.json");

        myWallet.AccountName = data.AccountName != null ? data.AccountName : "";
        myWallet.AccountNumber = data.AccountNumber != null ? data.AccountNumber : "";
        myWallet.Balance = data.Balance != 0 ? data.Balance : 0;

        foreach (var item in data.TransactionHistory) {
            transaction.Add(item);
        }
    }
    protected async override Task OnInitializedAsync() {
        @* Console.WriteLine("OnInitialize is running"); *@
        await LoadData();
    }

    public void handleTransactionType(bool type) {
        transactionType = type; 
    }

    public void handleTransaction(double amount) {
        if (amount != 0){
            if (transactionType) {
                myWallet.Balance += amount;
            } else if (!transactionType) {
                myWallet.Balance -= amount;
            } 

            transaction.Insert(0, new TransactionVM {Type=transactionType, Amount=amount, Time=DateTime.Now.ToString("dd MMM yyyy hh:mm tt")});
        }
    }
}